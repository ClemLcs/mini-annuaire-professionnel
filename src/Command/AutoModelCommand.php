<?php

namespace App\Command;

use App\Entity\Category;
use App\Entity\CategoryClass;
use App\Entity\Society;
use App\Repository\CategoryRepository;
use App\Repository\SocietyRepository;
use App\Entity\SocietyClass;
use Doctrine\ORM\EntityManagerInterface;
use ErrorException;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class AutoModelCommand extends Command
{
    /**
     * Attributs de la classe
     * @var string
     */
    protected static $defaultName = 'app:auto-model';

    private $io;

    private $customSociety;

    private $customCategory;


    /**
     * Constructeur de la classe
     * @param EntityManagerInterface $entityManager
     * @param null $name
     */
    public function __construct(EntityManagerInterface $entityManager, $name = null) {

        $this->customSociety = new SocietyClass($entityManager);
        $this->customCategory = new CategoryClass($entityManager);

        parent::__construct($name);
    }

    /**
     * Méthode Configure
     */
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this->setDescription("Commande permettant d'insérer des données par défaut dans la table Society");
        $this->setHelp("Commande permettant d'insérer des données par défault dans la table Society");

    }

    /**
     * Méthode Execute
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        //parent::execute($input, $output); // TODO: Change the autogenerated stub

        try {
            $this->io = new SymfonyStyle($input, $output);

            $this->start();

            // Vérifions si l'utilisateur souhaite utiliser les données par défaut
            $this->io->confirm('Voulez-vous enregitrer les données par défaut ?');

            $this->finish();

            return Command::SUCCESS;
        }catch (\Exception $exception){

            $this->display_error($exception);

            return Command::FAILURE;
        }

    }

    /**
     * Méthode de commencement
     */
    public function start(){
        $this->io->section('Initialisation du programme');
        sleep(1);
        $this->io->success('Initialisation des variables par défaut réalisées avec succès');
    }

    /**
     * Méthode de finissions
     */
    public function finish(){
        $this->io->success('Toutes les données sont enregistrées avec succès');
    }

    /**
     * Méthode permettant d'enregistrer les données par défaut
     * @throws \Exception
     */
    public function defaultMode(){

        $categories = $this->customCategory->defaultCategory();
        $societies = $this->customSociety->defaultSociety();

        $this->io->section('Recherche des données par défaut');
        sleep((count($categories) + count($societies))/4);

        $this->createCategory($categories);
        $this->createSociety($societies);

    }

    /**
     * Méthode pour permettant de créer une catégorie
     * @param array|null $data
     */
    public function createCategory(Array $data = null){
        for ($i=0; $i < count($data); $i++){
            $this->io->note('Enregistrement la catégorie n°'. $i+1 . '.');
            // Enregistrement de la catégorie en BDD
            $this->customCategory->saveCategory($data[$i]);
            sleep(1);
        }
    }

    /**
     * Méthode permettant de créer une société et la lier à une catégorie
     * @param array|null $data
     * @throws \Exception
     */
    public function createSociety(Array $data = null){
        for ($i=0; $i < count($data); $i++){
            $this->io->note('Enregistrement la société n°'. $i+1 . '.');

            // Enregistrement de la société en BDD
            $this->customSociety->saveSociety($data[$i]);
            sleep(1);

            // Liaison de la société à une catégorie en BDD
            $this->io->note('Liaison de la société n°'. $i+1 . ' avec la catégorie n°'. $data[$i]['id_category'] . '.');
            $this->customCategory->linkSocietyToCategory($data[$i]);
            sleep(1);
        }
    }

    /**
     * Méthode permettant d'afficher les erreurs
     * @param \Exception|null $e
     */
    public function display_error(\Exception $e = null){

        $this->io->error($e->getMessage());

    }
}